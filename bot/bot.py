from aiogram import Bot, Dispatcher, types

from settings import settings
from database.controller import get_user, set_user


bot = Bot(token=settings.bot_token)
dp = Dispatcher(bot)


@dp.message_handler(commands=["start", "settings"])
async def setup_command(message: types.Message):
    user = get_user(message.from_user.id)
    user.okveds = []
    user.chat_id = message.chat.id
    keyboard = (
        types.InlineKeyboardMarkup(row_width=1)
        .add(types.InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–µ—Ü üíº", callback_data="director"))
        .add(types.InlineKeyboardButton(text="–ë—É—Ö–≥–∞–ª—Ç–µ—Ä üíµ", callback_data="accountant"))
    )
    m = await bot.send_message(
        message.from_user.id,
        "–î–æ–±—Ä—ã–π –¥–µ–Ω—å. –≠—Ç–æ—Ç –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –¥–∞–π–¥–∂–µ—Å—Ç. –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–π–¥—ë–º –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:",
        reply_markup=keyboard,
    )
    user.last_message_id = m.message_id
    set_user(user)


@dp.callback_query_handler(lambda callback_query: callback_query.data in ["director", "accountant"])
async def callback_user(callback_query: types.CallbackQuery):
    user = get_user(callback_query.from_user.id)
    user.state = "OKVED"
    set_user(user)
    keyboard = types.InlineKeyboardMarkup(row_width=1).add(
        types.InlineKeyboardButton(text="–ù–µ—Ç –û–ö–í–≠–î–æ–≤ üôÅ", callback_data="save")
    )
    await bot.edit_message_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –û–ö–í–≠–î—ã:",
        message_id=user.last_message_id,
        chat_id=user.chat_id,
        reply_markup=keyboard,
    )


@dp.message_handler(regexp=r"([\d]{1,3})+(\.[\d]{1,3}|){1,}")
async def okved_handler(message: types.Message):
    user = get_user(message.from_user.id)
    if not user.state == "OKVED":
        return
    user.okveds = (user.okveds or []) + [message.text]
    set_user(user)
    text = "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –û–ö–í–≠–î—ã:\n" + "\n".join(user.okveds)
    keyboard = types.InlineKeyboardMarkup(row_width=1).add(
        types.InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save")
    )
    await bot.edit_message_text(text, message_id=user.last_message_id, chat_id=user.chat_id, reply_markup=keyboard)


@dp.callback_query_handler(lambda callback_query: callback_query.data == "save")
async def callback_save(callback_query: types.CallbackQuery):
    user = get_user(callback_query.from_user.id)
    user.state = "READY"
    keyboard = types.ReplyKeyboardMarkup().add(types.KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç"))
    if user.okveds is None or len(user.okveds) == 0:
        text = "–ü–æ–µ—Ö–∞–ª–∏ üöÄ\n–ë–µ–∑ –û–ö–í–≠–î–æ–≤"
        await bot.edit_message_reply_markup(chat_id=user.chat_id, message_id=user.last_message_id)
        await bot.send_message(chat_id=user.chat_id, text=text, reply_markup=keyboard)
    else:
        keyboard = keyboard.add(types.KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ–¥–±–æ—Ä–∫—É")).add(
            types.KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞—Ö")
        )
        text = "–ü–æ–µ—Ö–∞–ª–∏ üöÄ\n–í–∞—à–∏ –û–ö–í–≠–î—ã:\n" + "\n".join(user.okveds)
        await bot.edit_message_reply_markup(chat_id=user.chat_id, message_id=user.last_message_id)
        await bot.send_message(chat_id=user.chat_id, text=text, reply_markup=keyboard)
    set_user(user)


@dp.message_handler(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç")
async def digest_handler(message: types.Message):
    await bot.send_message(chat_id=message.from_id, text="–î–∞–π–¥–∂–µ—Å—Ç")


@dp.message_handler(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ–¥–±–æ—Ä–∫—É")
async def digest_handler(message: types.Message):
    user = get_user(message.from_user.id)
    if user.okveds is None or len(user.okveds) == 0:
        await setup_command(message)
        return
    await bot.send_message(chat_id=message.from_id, text=f"–ü–æ–¥–±–æ—Ä–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")


@dp.message_handler(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞—Ö")
async def digest_handler(message: types.Message):
    user = get_user(message.from_user.id)
    if user.okveds is None or len(user.okveds) == 0:
        await setup_command(message)
        return
    await bot.send_message(chat_id=message.from_id, text=f"–ü–æ–¥–±–æ—Ä–∫–∞ –æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
